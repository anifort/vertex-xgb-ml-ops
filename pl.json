{
  "pipelineSpec": {
    "components": {
      "comp-endpoint-create": {
        "executorLabel": "exec-endpoint-create",
        "inputDefinitions": {
          "parameters": {
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-deploy": {
        "executorLabel": "exec-model-deploy",
        "inputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "automatic_resources_max_replica_count": {
              "type": "INT"
            },
            "automatic_resources_min_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_accelerator_count": {
              "type": "INT"
            },
            "dedicated_resources_machine_type": {
              "type": "STRING"
            },
            "dedicated_resources_max_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_min_replica_count": {
              "type": "INT"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "traffic_split": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-upload": {
        "executorLabel": "exec-model-upload",
        "inputDefinitions": {
          "parameters": {
            "artifact_uri": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "serving_container_args": {
              "type": "STRING"
            },
            "serving_container_command": {
              "type": "STRING"
            },
            "serving_container_environment_variables": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            },
            "serving_container_ports": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-split-data": {
        "executorLabel": "exec-split-data",
        "inputDefinitions": {
          "parameters": {
            "data_path": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "data_out_x_test": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "data_out_x_train": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "data_out_y_test": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "data_out_y_train": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-xgb-training": {
        "executorLabel": "exec-xgb-training",
        "inputDefinitions": {
          "artifacts": {
            "dta_in_x_test": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "dta_in_x_train": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "dta_in_y_test": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "dta_in_y_train": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics_conf": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            },
            "metrics_para": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "path": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-endpoint-create": {
          "container": {
            "args": [
              "--type",
              "CreateEndpoint",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"\", \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\":\"\"}, \"network\": \"\"}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-model-deploy": {
          "container": {
            "args": [
              "--type",
              "DeployModel",
              "--payload",
              "{\"endpoint\": \"{{$.inputs.artifacts['endpoint'].metadata['resourceName']}}\", \"traffic_split\": {{$.inputs.parameters['traffic_split']}}, \"deployed_model\": {\"model\": \"{{$.inputs.artifacts['model'].metadata['resourceName']}}\", \"dedicated_resources\": {\"machine_spec\": {\"machine_type\": \"{{$.inputs.parameters['dedicated_resources_machine_type']}}\", \"accelerator_type\": \"\", \"accelerator_count\": {{$.inputs.parameters['dedicated_resources_accelerator_count']}}}, \"min_replica_count\": {{$.inputs.parameters['dedicated_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['dedicated_resources_max_replica_count']}}}, \"automatic_resources\": {\"min_replica_count\": {{$.inputs.parameters['automatic_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['automatic_resources_max_replica_count']}}}, \"service_account\": \"\", \"disable_container_logging\": \"\", \"enable_access_logging\": \"\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}}}",
              "--project",
              "",
              "--location",
              "",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-model-upload": {
          "container": {
            "args": [
              "--type",
              "UploadModel",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"\", \"predict_schemata\": {\"instance_schema_uri\": \"\", \"parameters_schema_uri\": \"\", \"prediction_schema_uri\": \"\"}, \"container_spec\": {\"image_uri\": \"{{$.inputs.parameters['serving_container_image_uri']}}\", \"command\": {{$.inputs.parameters['serving_container_command']}}, \"args\": {{$.inputs.parameters['serving_container_args']}}, \"env\": {{$.inputs.parameters['serving_container_environment_variables']}}, \"ports\": {{$.inputs.parameters['serving_container_ports']}}, \"predict_route\": \"\", \"health_route\": \"\"}, \"artifact_uri\": \"{{$.inputs.parameters['artifact_uri']}}\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}, \"encryption_spec\": {\"kms_key_name\":\"\"}, \"labels\": {{$.inputs.parameters['labels']}}}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.2.0"
          }
        },
        "exec-split-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "split_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'argparse' 'pandas' 'xgboost' 'numpy' 'sklearn' 'fsspec' 'gcsfs' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef split_data(\n    data_out_x_train: Output[Dataset],\n    data_out_x_test: Output[Dataset],\n    data_out_y_train: Output[Dataset],\n    data_out_y_test: Output[Dataset],\n    data_path: str,\n):\n    import pandas as pd\n    import xgboost as xgb\n    import numpy as np\n    import collections\n    import sklearn\n    from google.cloud import storage # test\n    from sklearn.model_selection import train_test_split\n    from sklearn.utils import shuffle\n\n    ### Import data ###\n    COLUMN_NAMES = collections.OrderedDict({\n        'as_of_year': np.int16,\n        'agency_code': 'category',\n        'loan_type': 'category',\n        'property_type': 'category',\n        'loan_purpose': 'category',\n        'occupancy': np.int8,\n        'loan_amt_thousands': np.float64,\n        'preapproval': 'category',\n        'county_code': np.float64,\n        'applicant_income_thousands': np.float64,\n        'purchaser_type': 'category',\n        'hoepa_status': 'category',\n        'lien_status': 'category',\n        'population': np.float64,\n        'ffiec_median_fam_income': np.float64,\n        'tract_to_msa_income_pct': np.float64,\n        'num_owner_occupied_units': np.float64,\n        'num_1_to_4_family_units': np.float64,\n        'approved': np.int8\n    })\n\n    data = pd.read_csv(data_path, index_col=False, dtype=COLUMN_NAMES)\n\n    ### Feature engineering ###\n    data = data.dropna()\n    data = data[0:100]\n    data = shuffle(data, random_state=2)\n\n    labels = data['approved'].values\n    data = data.drop(columns=['approved'])\n\n    dummy_columns = list(data.dtypes[data.dtypes == 'category'].index)\n    data = pd.get_dummies(data, columns=dummy_columns)\n\n    x,y = data.values,labels\n    x_train,x_test,y_train,y_test = train_test_split(x,y)\n\n    ### Export data as artifact ###\n    pd.DataFrame(x_train).to_csv(data_out_x_train.path, index=False, header=False)  \n    pd.DataFrame(y_train).to_csv(data_out_y_train.path, index=False, header=False)  \n    pd.DataFrame(x_test).to_csv(data_out_x_test.path, index=False, header=False)  \n    pd.DataFrame(y_test).to_csv(data_out_y_test.path, index=False, header=False)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-xgb-training": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "xgb_training"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'argparse' 'pandas' 'xgboost' 'numpy' 'sklearn' 'fsspec' 'gcsfs' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef xgb_training( \n    dta_in_x_train: Input[Dataset], \n    dta_in_y_train: Input[Dataset],\n    dta_in_x_test: Input[Dataset],\n    dta_in_y_test: Input[Dataset],\n    model: Output[Model],\n    metrics_conf: Output[ClassificationMetrics],\n    metrics_para: Output[Metrics]\n)  -> NamedTuple(\n    'ModelPathOut',\n    [\n      ('path', str)\n    ]):\n\n    import pandas as pd\n    import xgboost as xgb\n    import numpy as np\n    from google.cloud import storage\n    from sklearn.metrics import confusion_matrix\n    from sklearn.metrics import roc_curve\n    import os\n\n    from collections import namedtuple\n\n    ### Load data ###\n    x_train = pd.read_csv(dta_in_x_train.path, header=None)\n    y_train = pd.read_csv(dta_in_y_train.path, header=None)\n    x_test = pd.read_csv(dta_in_x_test.path, header=None)\n    y_test = pd.read_csv(dta_in_y_test.path, header=None)\n\n    ### Build model ###\n    eval_set = [(x_train, y_train.values.ravel()), (x_test, y_test.values.ravel())]\n    eval_metric = [\"auc\"]\n    bst = xgb.XGBClassifier(objective='reg:logistic')\n    bst.fit(x_train, y_train.values.ravel(), eval_set=eval_set, eval_metric=eval_metric)\n\n    ### Create evaluation metrics ###\n        # Confusion matrix\n    pred = bst.predict(x_train)\n    metrics_conf.log_confusion_matrix([\"0\", \"1\"], confusion_matrix(y_train.values.ravel(), pred).tolist())\n\n        # Additional metrics\n    results = bst.evals_result()\n    auc = results['validation_0']['auc'][0]\n    metrics_para.log_metric(\"auc\", (auc))\n\n    ### Export model ###\n    os.makedirs(model.path, exist_ok=True)\n    bst.save_model(model.path+\"/model.bst\")\n\n    output = namedtuple('ModelPathOut',\n        ['path'])\n    return output(model.path.replace('/gcs/', 'gs://'))\n\n"
            ],
            "image": "python:3.9",
            "resources": {
              "cpuLimit": 4.0,
              "memoryLimit": 15.032385536
            }
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "xgb-pipeline"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "xgb-training-metrics_conf": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics_conf",
                  "producerSubtask": "xgb-training"
                }
              ]
            },
            "xgb-training-metrics_para": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics_para",
                  "producerSubtask": "xgb-training"
                }
              ]
            }
          }
        },
        "tasks": {
          "endpoint-create": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-endpoint-create"
            },
            "dependentTasks": [
              "xgb-training"
            ],
            "inputs": {
              "parameters": {
                "display_name": {
                  "componentInputParameter": "endpoint_name"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "us-central1"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "endpoint-create"
            }
          },
          "model-deploy": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-deploy"
            },
            "dependentTasks": [
              "endpoint-create",
              "model-upload"
            ],
            "inputs": {
              "artifacts": {
                "endpoint": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "endpoint",
                    "producerTask": "endpoint-create"
                  }
                },
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "model-upload"
                  }
                }
              },
              "parameters": {
                "automatic_resources_max_replica_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                },
                "automatic_resources_min_replica_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                },
                "dedicated_resources_accelerator_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                },
                "dedicated_resources_machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "n1-standard-4"
                    }
                  }
                },
                "dedicated_resources_max_replica_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                },
                "dedicated_resources_min_replica_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "explanation_metadata": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "explanation_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "traffic_split": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "model-deploy"
            }
          },
          "model-upload": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-model-upload"
            },
            "dependentTasks": [
              "xgb-training"
            ],
            "inputs": {
              "parameters": {
                "artifact_uri": {
                  "taskOutputParameter": {
                    "outputParameterKey": "path",
                    "producerTask": "xgb-training"
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "modelxgb"
                    }
                  }
                },
                "explanation_metadata": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "explanation_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "us-central1"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project_id"
                },
                "serving_container_args": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "serving_container_command": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "serving_container_environment_variables": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "serving_container_image_uri": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "us-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.1-4:latest"
                    }
                  }
                },
                "serving_container_ports": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "model-upload"
            }
          },
          "split-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-split-data"
            },
            "inputs": {
              "parameters": {
                "data_path": {
                  "componentInputParameter": "data_path"
                }
              }
            },
            "taskInfo": {
              "name": "split-data"
            }
          },
          "xgb-training": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-xgb-training"
            },
            "dependentTasks": [
              "split-data"
            ],
            "inputs": {
              "artifacts": {
                "dta_in_x_test": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "data_out_x_test",
                    "producerTask": "split-data"
                  }
                },
                "dta_in_x_train": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "data_out_x_train",
                    "producerTask": "split-data"
                  }
                },
                "dta_in_y_test": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "data_out_y_test",
                    "producerTask": "split-data"
                  }
                },
                "dta_in_y_train": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "data_out_y_train",
                    "producerTask": "split-data"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "xgb-training"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "data_path": {
            "type": "STRING"
          },
          "endpoint_name": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "xgb-training-metrics_conf": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          },
          "xgb-training-metrics_para": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.9"
  },
  "runtimeConfig": {
    "parameters": {
      "endpoint_name": {
        "stringValue": "xgb-ep"
      }
    }
  }
}